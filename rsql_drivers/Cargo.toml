[package]
authors.workspace = true
categories.workspace = true
description = "rsql drivers library for accessing databases"
edition.workspace = true
keywords.workspace = true
license.workspace = true
name = "rsql_drivers"
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[dependencies]
anyhow = { workspace = true }
async-trait = { workspace = true }
base64 = { workspace = true }
bit-vec = { workspace = true, optional = true }
chrono = { workspace = true, features = ["serde"] }
duckdb = { workspace = true, features = ["bundled"], optional = true }
form_urlencoded = { workspace = true, optional = true }
futures-util = { workspace = true, optional = true }
indexmap = { workspace = true, features = ["serde"] }
indoc = { workspace = true }
jwt-simple = { workspace = true, optional = true, default-features = false, features = ["pure-rust"] }
libsql = { workspace = true, optional = true }
mockall = { workspace = true }
num-format = { workspace = true }
polars = { workspace = true, optional = true, features = ["lazy", "json", "polars-sql"] }
polars-sql = { workspace = true, optional = true }
postgresql_embedded = { workspace = true, optional = true }
regex = { workspace = true }
reqwest = { workspace = true, optional = true, features = ["json", "gzip"] }
rusqlite = { workspace = true, features = ["bundled-full"], optional = true }
rust_decimal = { workspace = true }
rust-i18n = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["preserve_order"] }
sha2 = { workspace = true, optional = true }
sqlparser = { workspace = true }
sqlx = { workspace = true, features = ["bit-vec", "chrono", "json", "macros", "runtime-tokio", "rust_decimal", "time", "uuid"], optional = true }
thiserror = { workspace = true }
tokio = { workspace = true, features = ["rt", "rt-multi-thread", "macros"] }
tokio-postgres = { workspace = true, features = ["array-impls", "with-bit-vec-0_6", "with-chrono-0_4", "with-serde_json-1", "with-uuid-1"], optional = true }
tokio-util = { workspace = true, features = ["compat"], optional = true }
tracing = { workspace = true }
url = { workspace = true }
uuid = { workspace = true, features = ["serde", "v4"] }

[target.'cfg(target_os = "macos")'.dependencies.tiberius]
default-features = false
features = ["bigdecimal", "chrono", "rust_decimal", "tds73", "time"]
optional = true
workspace = true

[target.'cfg(not(target_os = "macos"))'.dependencies.tiberius]
default-features = false
features = ["bigdecimal", "chrono", "rust_decimal", "tds73", "time", "vendored-openssl"]
optional = true
workspace = true

[dev-dependencies]
testcontainers = { workspace = true }
testcontainers-modules = { workspace = true, features = ["cockroach_db", "mariadb", "mssql_server", "mysql", "postgres"] }
tokio = { workspace = true }
wiremock = { workspace = true }

[features]
all = [
    "cockroachdb",
    "csv",
    "delimited",
    "duckdb",
    "json",
    "jsonl",
    "mariadb",
    "mysql",
    "postgres",
    "postgresql",
    "redshift",
    "rusqlite",
    "snowflake",
    "sqlite",
    "sqlserver",
    "tsv",
]
default = []
cockroachdb = [
    "postgresql",
]
csv = [
    "dep:polars",
    "dep:polars-sql",
]
delimited = [
    "dep:polars",
    "dep:polars-sql",
]
duckdb = [
    "dep:duckdb"
]
json = [
    "dep:polars",
    "dep:polars-sql",
]
jsonl = [
    "dep:polars",
    "dep:polars-sql",
]
libsql = [
    "dep:libsql"
]
mariadb = [
    "mysql",
]
mysql = [
    "dep:sqlx",
    "sqlx/mysql",
]
postgres = [
    "dep:postgresql_embedded",
    "dep:tokio-postgres",
]
postgresql = [
    "dep:bit-vec",
    "dep:postgresql_embedded",
    "dep:sqlx",
    "sqlx/postgres",
]
redshift = [
    "postgresql",
]
rusqlite = [
    "dep:rusqlite",
]
snowflake = [
    "dep:jwt-simple",
    "dep:reqwest",
    "dep:sha2",
]
sqlite = [
    "dep:form_urlencoded",
    "dep:sqlx",
    "sqlx/sqlite",
]
sqlserver = [
    "dep:futures-util",
    "dep:tiberius",
    "dep:tokio-util",
]
tsv = [
    "dep:polars",
    "dep:polars-sql",
]

[lints.clippy]
unwrap_used = "deny"

[package.metadata.docs.rs]
features = []
targets = ["x86_64-unknown-linux-gnu"]
